{"version":3,"sources":["redux/phonebook/phonebookSelectors.js","components/App/App.styled.jsx","components/ContactsList/ContactList.jsx","components/ContactsForm/ContactForm.jsx","components/Filter/Filter.jsx","views/contactsView.js"],"names":["getContacts","state","phonebook","entities","getFilter","filter","getFilteredContacts","createSelector","contacts","normalizedFilter","toLowerCase","contact","name","includes","SecondaryTitle","styled","h1","h2","button","ContactList","useSelector","dispatch","useDispatch","useEffect","phonebookOperation","length","className","Container","map","id","number","ListGroupItem","Button","onClick","onDeleteContacts","ContactForm","useState","setName","setNumber","handleChange","e","target","value","Form","onSubmit","preventDefault","find","checkName","toast","style","borderRadius","background","color","duration","Group","Label","Row","Col","Control","type","pattern","title","required","onChange","placeholed","Filter","display","event","changeFilter","onBlur","ContactsView","params","fetchContactsAction"],"mappings":"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","file":"static/js/contacts-page.33a2a7db.chunk.js","sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.phonebook.entities;\nexport const getFilter = state => state.phonebook.filter;\nexport const getLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\nexport const getFilteredContacts = createSelector([getContacts, getFilter], (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n});\n","import styled from '@emotion/styled';\n\nexport const PrimaryTitle = styled.h1`\n  color: gray;\n`;\n\nexport const SecondaryTitle = styled.h2`\n  color: gray;\n  text-align: center;\n  margin-bottom: 20px;\n`;\n\nexport const Button = styled.button`\n  width: fit-content;\n  padding: 10px;\n  margin-top: 8px;\n  font-size: 14px;\n  background-color: #0d6efd;\n  border: none;\n  border-radius: 10px;\n  &:hover,\n  &:active {\n    cursor: pointer;\n    background-color: #0b5fdd;\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container, Button, ListGroupItem } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport * as phonebookOperation from '../../redux/phonebook/phonebookOperations';\nimport { getFilteredContacts } from '../../redux/phonebook/phonebookSelectors';\nimport { SecondaryTitle } from '../App/App.styled';\n\nconst ContactList = () => {\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(phonebookOperation.fetchContactsAction());\n  }, [dispatch]);\n\n  const onDeleteContacts = id => dispatch(phonebookOperation.deleteContactAction(id));\n\n  if (contacts.length === 0) {\n    return <h2 className=\"home-title\">There are no contacts in the list</h2>;\n  } else {\n    return (\n      <Container>\n        <SecondaryTitle>Contact list</SecondaryTitle>\n        {contacts.map(({ id, name, number }) => (\n          <ListGroupItem key={id}>\n            {name} : {number}\n            <Button onClick={() => onDeleteContacts(id)}>Delete</Button>\n          </ListGroupItem>\n        ))}\n      </Container>\n    );\n  }\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ),\n  onDeleteContacts: PropTypes.func,\n};\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Form, Col, Row, Button, Container } from 'react-bootstrap';\nimport * as phonebookOperation from '../../redux/phonebook/phonebookOperations';\nimport { useSelector } from 'react-redux';\nimport { getContacts } from '../../redux/phonebook/phonebookSelectors';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { SecondaryTitle } from '../App/App.styled';\n\nexport function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const onSubmit = (name, number) =>\n    dispatch(phonebookOperation.addContactAction({ name, number }));\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    name === 'name' ? setName(value) : setNumber(value);\n  };\n\n  const checkName = name => {\n    return contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const notification = () => {\n      toast(`${name} is already in contacts`, {\n        style: {\n          borderRadius: '10px',\n          background: '#0d6efd',\n          color: '#fff',\n          duration: 2000,\n        },\n      });\n    };\n\n    if (checkName(name)) {\n      notification();\n    } else {\n      onSubmit(name, number);\n      setName('');\n      setNumber('');\n    }\n  };\n\n  return (\n    <Container>\n      <Form onSubmit={handleSubmit}>\n        <Form.Group>\n          <SecondaryTitle>Add new contact</SecondaryTitle>\n\n          <Form.Label>Name</Form.Label>\n          <Row>\n            <Col>\n              <Form.Control\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                required\n                value={name}\n                onChange={handleChange}\n                placeholed=\"Введите имя\"\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Form.Label>Phone</Form.Label>\n              <Form.Control\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                required\n                value={number}\n                onChange={handleChange}\n                placeholed=\"Введите телефон\"\n              />\n            </Col>\n          </Row>\n        </Form.Group>\n        <Row>\n          <Col>\n            <Button type=\"submit\">Add to contact list</Button>\n          </Col>\n        </Row>\n      </Form>\n      <Toaster />\n    </Container>\n  );\n}\n\nexport default ContactForm;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { Form, Container } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { getFilter } from '../../redux/phonebook/phonebookSelectors';\nimport { changeFilter } from '../../redux/phonebook/phonebookActions';\nimport { getContacts } from '../../redux/phonebook/phonebookSelectors';\nimport { SecondaryTitle } from '../App/App.styled';\n\nconst Filter = () => {\n  const contacts = useSelector(getContacts);\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onChangeHandler = event => dispatch(changeFilter(event.target.value));\n  const onBlurHandler = () => dispatch(changeFilter(''));\n\n  if (contacts.length === 0) {\n    return <h2 style={{ display: 'none' }}>Search</h2>;\n  } else {\n    return (\n      <Container>\n        <Form>\n          <Form.Group>\n            <SecondaryTitle>Find a contact by name </SecondaryTitle>\n            <Form.Control\n              type=\"text\"\n              value={value}\n              onChange={onChangeHandler}\n              onBlur={onBlurHandler}\n            />\n          </Form.Group>\n        </Form>\n      </Container>\n    );\n  }\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContactsAction } from '../redux/phonebook/phonebookOperations';\nimport ContactList from '../components/ContactsList/ContactList';\nimport ContactForm from '../components/ContactsForm/ContactForm';\nimport Filter from '../components/Filter/Filter';\n\nexport default function ContactsView(params) {\n  const dispatch = useDispatch();\n\n  useEffect(() => dispatch(fetchContactsAction()), [dispatch]);\n\n  return (\n    <div>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n"],"sourceRoot":""}